I"„c<h3 id="what-is-opencv">What is OpenCV?</h3>

<p><a href="https://opencv.org">OpenCV</a> stands for <strong>Open</strong>-Source <strong>C</strong>omputer-<strong>V</strong>ision Library.</p>

<p>As name suggests, library has lots of various features for computer vision, for instance:</p>

<ul>
  <li><a href="https://docs.opencv.org/master/d1/d69/tutorial_table_of_content_ml.html">Machine Learning</a></li>
  <li><a href="https://docs.opencv.org/master/d7/da8/tutorial_table_of_content_imgproc.html">Image processing</a></li>
  <li><a href="https://docs.opencv.org/master/d7/df3/group__imgproc__motion.html">Motion analysis</a></li>
  <li><a href="https://docs.opencv.org/master/d9/db7/group__datasets__gr.html">Gesture recognition</a></li>
  <li><a href="https://docs.opencv.org/master/de/d93/group__datasets__fr.html">Face recognition</a></li>
</ul>

<p>OpenCV is cross-platform, supporting major desktop platforms (Windows, Linux, MacOS), as well as mobile platforms (iOS, Android).</p>

<p>The project is open-source software, licensed under BSD license.</p>

<p>Also, it has bindings for Java, Python, Haskel, MATLAB, etc.</p>

<p>OpenCV has strong focus on performance, with optimized code for various microarchitectures (SSE and AVX on x86, NEON on ARM, VSX on PowerPC, etc).</p>

<p>Library is suitable for heterogeneous computing, supporting CUDA and OpenCL.</p>

<p>To summarize, OpenCV library is very large, and has tons of features for the computer vision. In addition, it has collection of additional modules called <a href="https://github.com/opencv/opencv_contrib">OpenCV Contrib</a>, if base is not enough.</p>

<h3 id="whats-new-in-opencv-400-release">Whatâ€™s new in OpenCV 4.0.0 release?</h3>

<p>OpenCV has released final version <a href="https://opencv.org/opencv-4-0-0.html">4.0.0</a> on November 2018.</p>

<p>There are a lot of new features (see the complete <a href="https://opencv.org/opencv-4-0-0.html">changelog</a>), for instance:</p>

<ul>
  <li><a href="https://docs.opencv.org/4.0.0/de/dc3/classcv_1_1QRCodeDetector.html">QR-Code detector</a></li>
  <li><a href="https://docs.opencv.org/4.0.0/d7/d0d/group__gapi.html">G-API framework</a></li>
  <li><a href="https://docs.opencv.org/4.0.0/d8/d1f/classcv_1_1kinfu_1_1KinFu.html">KinectFusion algorithm</a></li>
</ul>

<p>also, OpenCV 4.x is getting rid of some technical debt, for example:</p>

<ul>
  <li>OpenCV is now <a href="https://en.wikipedia.org/wiki/C%2B%2B11">C++11</a> library and requires <a href="https://en.cppreference.com/w/cpp/compiler_support#cpp11">C++11-compliant compiler</a></li>
  <li>Removed many of OpenCV 1.x C APIs</li>
  <li><a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a> and <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr">std::shared_ptr</a> are now used instead of hand-crafted <a href="https://docs.opencv.org/3.4/d1/d8f/classcv_1_1String.html">cv::String</a> and <a href="https://docs.opencv.org/3.4/d0/de7/structcv_1_1Ptr.html">cv::Ptr</a></li>
</ul>

<p>as usual, there are numerous bug fixes and performance improvements.</p>

<h3 id="opencv-g-api">OpenCV G-API</h3>

<p>Letâ€™s take a deeper look at new OpenCV feature called <a href="https://github.com/opencv/opencv/wiki/Graph-API">G-API</a> (stands for Graph API).</p>

<p>Previously, with classic OpenCV 2.x API, programming model was very traditional - you call OpenCV functions, they perform some computations and return the result. This model should look familar and natural to the most programmers, as itâ€™s similar to regular <a href="https://en.cppreference.com/w/cpp/experimental/fs">filesystem API</a>, for example.
OpenCV 4.x introduces very different programming model where you define pipeline of operations to be performed first, and then apply this pipeline to some actual data. In other words, whenever you call OpenCV G-API function, execution is deferred (lazily-evaluated), and deferred operation result is being returned instead of actual computation result. This concept might sound very similar to <a href="https://en.cppreference.com/w/cpp/experimental/ranges">Ranges TS</a> (or <a href="https://github.com/ericniebler/range-v3">Range V3</a>, or <a href="https://www.boost.org/doc/libs/1_68_0/libs/range/doc/html/index.html">Boost Range</a>).</p>

<p>This is an especially important feature, as if you donâ€™t need to get an intermediate results, you can easily off-load the entire pipeline into the GPU, therefore there will be no intermediate copying from the system to the video memory and vice versa - only initial input and final output has to be loaded to/from the GPU.</p>

<h3 id="practicing-g-api">Practicing G-API</h3>

<p>Complete code examples from this blog post are available on GitHub: <a href="https://github.com/SSE4/opencv4-demo">opencv4-demo</a> (project uses <a href="https://cmake.org">CMake</a> and <a href="https://conan.io">conan</a> to build).</p>

<p>For instance, we have the following code which uses classic OpenCV 2.x API:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;cstdlib&gt;
#include &lt;opencv2/imgproc.hpp&gt;
#include &lt;opencv2/imgcodecs.hpp&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">imgIn</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="s">"in.png"</span><span class="p">),</span> <span class="n">imgBlur</span><span class="p">,</span> <span class="n">imgGray</span><span class="p">,</span> <span class="n">imgOut</span><span class="p">,</span> <span class="n">sobelX</span><span class="p">,</span> <span class="n">sobelY</span><span class="p">,</span> <span class="n">gradX</span><span class="p">,</span> <span class="n">gradY</span><span class="p">;</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">imgIn</span><span class="p">,</span> <span class="n">imgBlur</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">BORDER_DEFAULT</span><span class="p">);</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">imgBlur</span><span class="p">,</span> <span class="n">imgGray</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">COLOR_BGR2GRAY</span><span class="p">);</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">imgGray</span><span class="p">,</span> <span class="n">sobelX</span><span class="p">,</span> <span class="n">CV_16S</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">imgGray</span><span class="p">,</span> <span class="n">sobelY</span><span class="p">,</span> <span class="n">CV_16S</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobelX</span><span class="p">,</span> <span class="n">gradX</span><span class="p">);</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobelY</span><span class="p">,</span> <span class="n">gradY</span><span class="p">);</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">addWeighted</span><span class="p">(</span><span class="n">sobelX</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">sobelY</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">imgOut</span><span class="p">);</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">imwrite</span><span class="p">(</span><span class="s">"out.png"</span><span class="p">,</span> <span class="n">imgOut</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>The example takes an input image file, blurs it, converts to the grayscale and finally applies the <a href="https://en.wikipedia.org/wiki/Sobel_operator">Sobel operator</a>, then saves result of operator applied to an another image file. So, if we have the following image file as an input:</p>

<p class="centered">
    <img src="http://localhost:4000/assets/post_images/2018-12-19/in.png" align="center" width="300" alt="A color picture of a steam engine" />
</p>

<p>then result might look like:</p>

<p class="centered">
    <img src="http://localhost:4000/assets/post_images/2018-12-19/out.png" align="center" width="300" alt="The Sobel operator applied to that image" />
</p>

<p>Such code is usually used for the <a href="https://en.wikipedia.org/wiki/Edge_detection">edge detection</a>, which is frequently used image processing task.</p>

<p>Okay, how to migrate the code you already have to the G-API? First off, youâ€™ll need to include additional OpenCV headers:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;opencv2/gapi.hpp&gt;
#include &lt;opencv2/gapi/core.hpp&gt;
#include &lt;opencv2/gapi/imgproc.hpp&gt;</span></code></pre></figure>

<p>Second, functions from the <strong>cv::</strong> namespace are being replaced by corresponding functions from the new <strong>cv::gapi::</strong> namespace, e.g. <a href="https://docs.opencv.org/4.0.0/d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d">cv::Sobel</a> becomes <a href="https://docs.opencv.org/4.0.0/da/dc5/group__gapi__filters.html#gae1443445c4cb3187dcf439a57cfa534f">cv::gapi::Sobel</a>, and so on. These functions do not have an output argument, instead, they return value of <a href="https://docs.opencv.org/4.0.0/df/daa/classcv_1_1GMat.html">cv::GMat</a> type (analogue of well-known <a href="https://docs.opencv.org/4.0.0/d3/d63/classcv_1_1Mat.html">cv::Mat</a> type). Same for the input arguments - they also accept <strong>cv::GMat</strong>.
Some functions might be missing in the <strong>cv::gapi::</strong> namespace, for instance <a href="https://docs.opencv.org/4.0.0/d2/de8/group__core__array.html#ga3460e9c9f37b563ab9dd550c4d8c4e7d">cv::convertScaleAbs</a>, but itâ€™s pretty straightforward to implement it yourself:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">static</span> <span class="n">cv</span><span class="o">::</span><span class="n">GMat</span> <span class="nf">convertScaleAbs</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">GMat</span> <span class="o">&amp;</span> <span class="n">src</span><span class="p">,</span> <span class="kt">double</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span> <span class="kt">double</span> <span class="n">beta</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">absDiffC</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">addC</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">mulC</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">alpha</span><span class="p">),</span> <span class="n">beta</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">convertTo</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">CV_8UC1</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>With implementation above, rewriting image processing code is pretty straightforward:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp">    <span class="k">auto</span> <span class="n">imgBlur</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">gaussianBlur</span><span class="p">(</span><span class="n">gIn</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">BORDER_DEFAULT</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">imgGray</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">convertTo</span><span class="p">(</span><span class="n">imgBlur</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">sobelX</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">imgGray</span><span class="p">,</span> <span class="n">CV_16S</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">sobelY</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">imgGray</span><span class="p">,</span> <span class="n">CV_16S</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">gradX</span> <span class="o">=</span> <span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobelX</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">gradY</span> <span class="o">=</span> <span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobelY</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">gOut</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">addWeighted</span><span class="p">(</span><span class="n">sobelX</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">sobelY</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span></code></pre></figure>

<p>Once pipeline is established, itâ€™s time to construct the <a href="https://docs.opencv.org/4.0.0/d9/dfe/classcv_1_1GComputation.html">cv::GComputation</a> object:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp">    <span class="n">cv</span><span class="o">::</span><span class="n">GComputation</span> <span class="nf">computation</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">GIn</span><span class="p">(</span><span class="n">gIn</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">GOut</span><span class="p">(</span><span class="n">gOut</span><span class="p">));</span></code></pre></figure>

<p>And finally, computation might be applied to the actual data:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp">    <span class="n">computation</span><span class="p">.</span><span class="n">apply</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">gin</span><span class="p">(</span><span class="n">imgIn</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">gout</span><span class="p">(</span><span class="n">imgOut</span><span class="p">));</span></code></pre></figure>

<p>At this time, actual data processing takes its place.</p>

<p>The complete example using the G-API:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;cstdlib&gt;
#include &lt;opencv2/imgproc.hpp&gt;
#include &lt;opencv2/imgcodecs.hpp&gt;
#include &lt;opencv2/gapi.hpp&gt;
#include &lt;opencv2/gapi/core.hpp&gt;
#include &lt;opencv2/gapi/imgproc.hpp&gt;
</span>
<span class="k">static</span> <span class="n">cv</span><span class="o">::</span><span class="n">GMat</span> <span class="nf">convertScaleAbs</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">GMat</span> <span class="o">&amp;</span> <span class="n">src</span><span class="p">,</span> <span class="kt">double</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span> <span class="kt">double</span> <span class="n">beta</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">absDiffC</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">addC</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">mulC</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">alpha</span><span class="p">),</span> <span class="n">beta</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">convertTo</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">CV_8UC1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">GMat</span> <span class="n">gIn</span><span class="p">;</span>

    <span class="k">auto</span> <span class="n">imgBlur</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">gaussianBlur</span><span class="p">(</span><span class="n">gIn</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">BORDER_DEFAULT</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">imgGray</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">convertTo</span><span class="p">(</span><span class="n">imgBlur</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">sobelX</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">imgGray</span><span class="p">,</span> <span class="n">CV_16S</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">sobelY</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">imgGray</span><span class="p">,</span> <span class="n">CV_16S</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">gradX</span> <span class="o">=</span> <span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobelX</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">gradY</span> <span class="o">=</span> <span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobelY</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">gOut</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">gapi</span><span class="o">::</span><span class="n">addWeighted</span><span class="p">(</span><span class="n">sobelX</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">sobelY</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">GComputation</span> <span class="n">computation</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">GIn</span><span class="p">(</span><span class="n">gIn</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">GOut</span><span class="p">(</span><span class="n">gOut</span><span class="p">));</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">imgIn</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="s">"in.png"</span><span class="p">),</span> <span class="n">imgOut</span><span class="p">;</span>

    <span class="n">computation</span><span class="p">.</span><span class="n">apply</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">gin</span><span class="p">(</span><span class="n">imgIn</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">gout</span><span class="p">(</span><span class="n">imgOut</span><span class="p">));</span>

    <span class="n">cv</span><span class="o">::</span><span class="n">imwrite</span><span class="p">(</span><span class="s">"out.png"</span><span class="p">,</span> <span class="n">imgOut</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h3 id="conclusion">Conclusion</h3>

<p>OpenCV 4.0 release adds very foundational changes, that completely change the way how do you write programs, making support of heterogeneous computing much more straightforward.
Feel free to try to experiment with new OpenCV features, such as G-API, check out the <a href="https://github.com/SSE4/opencv4-demo">opencv4-demo</a> repository, in order to compile and run examples from this article.</p>
:ET