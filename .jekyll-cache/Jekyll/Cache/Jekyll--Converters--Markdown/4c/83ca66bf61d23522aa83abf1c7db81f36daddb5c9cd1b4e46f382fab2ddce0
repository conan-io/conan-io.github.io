I"j¹<p>As you will probably know, Conan has official support for integration with several build systems such as
<a href="https://cmake.org/">CMake</a>, <a href="https://visualstudio.microsoft.com">MSBuild</a> or
<a href="https://mesonbuild.com/">Meson</a> amongst others. But maybe you donâ€™t know that if you are using a build system
that is not currently supported, Conan provides the tools to integrate it and build and consume packages that
use it.</p>

<p>The code for this post is now available in the <a href="https://github.com/conan-io/examples">Conan examples repository</a>. 
Feel free to clone it and experiment with the code.</p>

<h3 id="where-do-i-start-">Where do I start ?</h3>

<p>Imagine that you want to create some packages using a specific build system and let others consume your packages and build them in case there are not binaries generated for their configuration. Conan has three features that can help you with that:</p>

<ul>
  <li>
    <p><a href="https://docs.conan.io/en/latest/reference/generators.html">Conan generators</a>. They provide your build
system with all the information about dependencies in a suitable format.</p>
  </li>
  <li>
    <p><a href="https://docs.conan.io/en/latest/devtools/create_installer_packages.html">Conan installer</a>. Conan allows you
to create packages for tools needed in the build process and installing them later with a <code class="highlighter-rouge">build_requires</code> to
be able to invoke that tool from Conan. In our case, we want to install the tools to run our build system.</p>
  </li>
  <li>
    <p><a href="https://docs.conan.io/en/latest/reference/build_helpers.html">Conan build-helper</a>. Build-helpers assist you
in the process of translating settings such as <code class="highlighter-rouge">build_type</code>, <code class="highlighter-rouge">compiler.version</code> or <code class="highlighter-rouge">arch</code> to the
build system. It can also invoke the build system tools to build our sources. To use the build helper inside
a <code class="highlighter-rouge">conanfile.py</code> we will use a <a href="https://docs.conan.io/en/latest/reference/conanfile/other.html">Python
requires</a></p>
  </li>
</ul>

<h3 id="conan-generator-for-the-waf-build-system">Conan generator for the Waf build system</h3>

<p>To test these tools, we have selected the <a href="https://waf.io/">Waf</a> build system. Waf is a build-automation tool
designed to help in the automatic compilation and installation of computer software. It is open-source
software written in Python and is released under the terms of the <a href="https://waf.io/book">BSD
license</a>.</p>

<p>Waf is a generic utility for building projects and project-specific details are stored in Python modules under
the name <em>wscript</em>. A Waf project must contain a top-level <em>wscript</em> where the commands that will make the
build happen are defined. Also, a <em>configuration context</em> will store data which may be re-used during the build.
Letâ€™s see how a minimal implementation for that <em>wscript</em> would look for a C++ project where we want to build
an executable that depends on <code class="highlighter-rouge">mylib</code> library.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#! /usr/bin/env python
# encoding: utf-8
</span>
<span class="n">top</span> <span class="o">=</span> <span class="s">'.'</span>
<span class="n">out</span> <span class="o">=</span> <span class="s">'build'</span>

<span class="k">def</span> <span class="nf">options</span><span class="p">(</span><span class="n">opt</span><span class="p">):</span>
    <span class="n">opt</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'compiler_cxx'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="n">conf</span><span class="p">):</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'compiler_cxx'</span><span class="p">)</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">INCLUDES_mylib</span> <span class="o">=</span> <span class="p">[</span><span class="s">'dir_to_mylib_includes'</span><span class="p">]</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">LIBPATH_mylib</span> <span class="o">=</span> <span class="p">[</span><span class="s">'dir_to_mylib_libs'</span><span class="p">]</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">LIB_mylib</span> <span class="o">=</span> <span class="s">'mylib'</span>

<span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">bld</span><span class="p">):</span>
    <span class="n">bld</span><span class="o">.</span><span class="n">program</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="s">'main.cpp'</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="s">'app'</span><span class="p">,</span> <span class="n">use</span><span class="o">=</span><span class="s">'mylib'</span><span class="p">)</span></code></pre></figure>

<p>As you can see, there are several commands defined here being <code class="highlighter-rouge">configure()</code> and <code class="highlighter-rouge">build()</code> the ones that matter
most to us at this moment.</p>

<ul>
  <li>
    <p>The <code class="highlighter-rouge">configure</code> command has the responsibility to set several settings and find the location of the
prerequisites. We have to modify the <em>configuration context</em> (<code class="highlighter-rouge">conf.env</code>) variable to tell Waf where will
it be able to find the <em>includes</em> and <em>library</em> files. Conan has all this information so we will need a tool
that transforms that information in a way we can load in the <em>wscript</em> and thatâ€™s what a <em>Conan
generator</em> is designed to do.</p>
  </li>
  <li>
    <p>The <code class="highlighter-rouge">build</code> command will transform the source files into build files. Note that in the call to <code class="highlighter-rouge">bld.program</code>
we can tell Waf which libraries we are linking with the <code class="highlighter-rouge">use</code> argument. The <em>Conan generator</em> will have to
provide this argument to Waf as well.</p>
  </li>
</ul>

<p>Waf provides us with the capability of loading <em>python modules</em> using the <code class="highlighter-rouge">load</code> command. We can load the
Python code created by the <em>Conan generator</em> to modify the Waf <em>configuration context</em>. That way we can
include the information about all the dependencies.</p>

<h4 id="custom-conan-generators">Custom Conan generators</h4>

<p>A <a href="https://docs.conan.io/en/latest/reference/generators/custom.html#custom-generator">custom generator</a> in
Conan is a class that extends <code class="highlighter-rouge">Generator</code> and implements two properties:</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">filename</code> should return the name of the file that will be generated. In our case, we will generate a
file called <code class="highlighter-rouge">waf_conan_libs_info.py</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">content</code> should return the contents of the file with the desired format. Here we will retrieve all
that information from the <code class="highlighter-rouge">deps_build_info</code> property of the <code class="highlighter-rouge">Generator</code> class. That property is a
dictionary that has all the information required to link the library.</p>
  </li>
</ul>

<p>To use the <em>generator</em> in our consumers we will have to make a package that can be later loaded as a
<code class="highlighter-rouge">build_requires</code>. The implementation of the <em>generator will</em> go in <code class="highlighter-rouge">conanfile.py</code> and can be as simple as
this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Waf</span><span class="p">(</span><span class="n">Generator</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">_remove_lib_extension</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">libs</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">lib</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="k">if</span> <span class="n">lib</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">".lib"</span><span class="p">)</span> <span class="k">else</span> <span class="n">lib</span> <span class="k">for</span> <span class="n">lib</span> <span class="ow">in</span> <span class="n">libs</span><span class="p">]</span>

    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">filename</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"waf_conan_libs_info.py"</span>

    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">content</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">sections</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"def configure(ctx):"</span><span class="p">)</span>
        <span class="n">conan_libs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">dep_name</span><span class="p">,</span> <span class="n">info</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">deps_build_info</span><span class="o">.</span><span class="n">dependencies</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">dep_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">conanfile</span><span class="o">.</span><span class="n">build_requires</span><span class="p">:</span>
                <span class="n">dep_name</span> <span class="o">=</span> <span class="n">dep_name</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"-"</span><span class="p">,</span> <span class="s">"_"</span><span class="p">)</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"   ctx.env.INCLUDES_{} = {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span>
                    <span class="n">dep_name</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">include_paths</span><span class="p">))</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"   ctx.env.LIBPATH_{} = {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span>
                    <span class="n">dep_name</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">lib_paths</span><span class="p">))</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"   ctx.env.LIB_{} = {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span>
                    <span class="n">dep_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_remove_lib_extension</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">libs</span><span class="p">)))</span>
                <span class="n">conan_libs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dep_name</span><span class="p">)</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"   ctx.env.CONAN_LIBS = {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">conan_libs</span><span class="p">))</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sections</span><span class="p">)</span></code></pre></figure>

<p>This generator will create the <code class="highlighter-rouge">waf_conan_libs_info.py</code> file with all the dependencies information. We can
pass this information to Waf with the <code class="highlighter-rouge">load</code> command in the <em>wscript</em>:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="n">conf</span><span class="p">):</span>
	<span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'compiler_cxx'</span><span class="p">)</span>
	<span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'waf_conan_libs_info'</span><span class="p">,</span> <span class="n">tooldir</span><span class="o">=</span><span class="s">'.'</span><span class="p">)</span></code></pre></figure>

<p>But that would only work if we have the Waf build tool in our path. However, we donâ€™t know if our consumers
are going to have it installed. We can solve this problem creating a Conan <em>installer package</em>.</p>

<h3 id="creating-a-package-to-install-the-build-system">Creating a package to install the build system</h3>

<p>As we said, Waf is a build system written in Python so to use it we will need to download the
Python script from the <a href="https://gitlab.com/ita1024/waf/">Waf repository</a>. We can create a Conan package that
downloads the tool and makes it available to perform our build. This would be the structure of the
<code class="highlighter-rouge">conanfile.py</code> for our installer:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">WAFInstallerConan</span><span class="p">(</span><span class="n">ConanFile</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">"waf"</span>
    <span class="n">version</span> <span class="o">=</span> <span class="s">"2.0.18"</span>
    <span class="n">settings</span> <span class="o">=</span> <span class="s">"os_build"</span>
    <span class="n">homepage</span> <span class="o">=</span> <span class="s">"https://gitlab.com/ita1024/waf"</span>
    <span class="n">license</span> <span class="o">=</span> <span class="s">"BSD"</span>
    <span class="n">exports_sources</span> <span class="o">=</span> <span class="p">[</span><span class="s">"LICENSE"</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">source_url</span> <span class="o">=</span> <span class="s">"https://waf.io/waf-</span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">"Downloading Waf build system: </span><span class="si">%</span><span class="s">s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">source_url</span><span class="p">))</span>
        <span class="n">tools</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="n">source_url</span><span class="p">,</span> <span class="s">"waf"</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">os_build</span> <span class="o">==</span> <span class="s">"Windows"</span><span class="p">:</span>
            <span class="n">tools</span><span class="o">.</span><span class="n">download</span><span class="p">(</span>
                <span class="s">"https://gitlab.com/ita1024/waf/raw/waf-{}/utils/waf.bat"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">version</span><span class="p">),</span> <span class="s">"waf.bat"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">os_build</span> <span class="o">==</span> <span class="s">"Linux"</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">os_build</span> <span class="o">==</span> <span class="s">"Macos"</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s">"chmod 755 waf"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">package</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">pattern</span><span class="o">=</span><span class="s">"LICENSE"</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">'.'</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"licenses"</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">'waf'</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">'.'</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"bin"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">'waf.bat'</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">'.'</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"bin"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">package_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Using Waf </span><span class="si">%</span><span class="s">s version"</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">env_info</span><span class="o">.</span><span class="n">PATH</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">package_folder</span><span class="p">,</span> <span class="s">"bin"</span><span class="p">))</span></code></pre></figure>

<p>Note that <strong>only</strong> the <code class="highlighter-rouge">os_build</code> setting has been left from the settings of the <code class="highlighter-rouge">conanfile.py</code> because it
does not make sense to create different installer packages depending for example on the <code class="highlighter-rouge">compiler</code> or
<code class="highlighter-rouge">arch</code> as the tool will be the same for all those configurations. After installing this package all
consumers that declare it as <code class="highlighter-rouge">build_requires</code> will have this tool available on the path.</p>

<p>At this point, we are able to <em>tell Waf about the libraries locations</em> and we <em>can invoke Waf</em> from a
<em>conanfile</em> using <code class="highlighter-rouge">self.run()</code> and manually passing settings like the <code class="highlighter-rouge">build_type</code>. But there is a better
way of doing this that will be the missing piece of our puzzle: <em>creating our own Conan build-helper</em>.</p>

<h3 id="conan-build-helper-for-waf">Conan build-helper for Waf</h3>

<p>Our build-helper will have two missions:</p>

<ul>
  <li>
    <p>Generate all the information with the Conan <em>build settings</em> to a format Waf can understand. We will generate
another <em>Python module</em> that sets build information that Conan has such as <code class="highlighter-rouge">arch</code>,
<code class="highlighter-rouge">build_type</code>, <code class="highlighter-rouge">compiler</code> or <code class="highlighter-rouge">compiler.runtime</code> in Waf. The name of this file will be
<code class="highlighter-rouge">waf_conan_toolchain.py</code>.</p>
  </li>
  <li>
    <p>Assist with the compilation of libraries and applications in the <code class="highlighter-rouge">build()</code> method of a recipe. We will
create a method that invokes the build system abstracting the calls to <code class="highlighter-rouge">self.run</code> in the <em>conanfile</em>.</p>
  </li>
</ul>

<p>To create our own build-helper, we will use the <code class="highlighter-rouge">python_requires()</code> feature of Conan. That way we will be
able to reuse python code existing in other <code class="highlighter-rouge">conanfile.py</code> recipes. We will create a package with our
build-helper code and reuse it in the consumers importing them as a <em>Python requires</em>. There is a minimal
implementation of the <em>Python requires</em> in the <em>conanfile</em> but all the important code will reside in
<code class="highlighter-rouge">waf_environment.py</code> file that contains the <code class="highlighter-rouge">WafBuildEnvironment</code> class. To learn a bit more about <em>Python
Requires</em>, please visit the <a href="https://docs.conan.io/en/latest/extending/python_requires.html#python-requires">Conan
documentation</a>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">PythonRequires</span><span class="p">(</span><span class="n">ConanFile</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">"waf-build-helper"</span>
    <span class="n">version</span> <span class="o">=</span> <span class="s">"0.1"</span>
    <span class="n">exports</span> <span class="o">=</span> <span class="s">"waf_environment.py"</span></code></pre></figure>

<p>As we said, all the important code is in the <code class="highlighter-rouge">WafBuildEnvironment</code> class in <code class="highlighter-rouge">waf_environment.py</code>. Letâ€™s
see an example of a simplified build-helper implementation that only takes into account the Conan
<code class="highlighter-rouge">build_type</code>. The configuration of the environment is made calling to the <code class="highlighter-rouge">configure</code> method of the
<code class="highlighter-rouge">WafBuildEnvironment</code> class.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">WafBuildEnvironment</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">conanfile</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_conanfile</span> <span class="o">=</span> <span class="n">conanfile</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_compiler</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_conanfile</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">compiler</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_build_type</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_conanfile</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">build_type</span>

    <span class="k">def</span> <span class="nf">_toolchain_content</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">sections</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"def configure(conf):"</span><span class="p">)</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"    if not conf.env.CXXFLAGS:"</span><span class="p">)</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"       conf.env.CXXFLAGS = []"</span><span class="p">)</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"    if not conf.env.LINKFLAGS:"</span><span class="p">)</span>
        <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"       conf.env.LINKFLAGS = []"</span><span class="p">)</span>
        <span class="k">if</span> <span class="s">"Visual Studio"</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_compiler</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_build_type</span> <span class="o">==</span> <span class="s">"Debug"</span><span class="p">:</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"    conf.env.CXXFLAGS.extend(['/Zi', '/FS'])"</span><span class="p">)</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"    conf.env.LINKFLAGS.extend(['/DEBUG'])"</span><span class="p">)</span>
            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_build_type</span> <span class="o">==</span> <span class="s">"Release"</span><span class="p">:</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"    conf.env.CXXFLAGS.extend(['/O2', '/DNDEBUG'])"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_build_type</span> <span class="o">==</span> <span class="s">"Debug"</span><span class="p">:</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"    conf.env.CXXFLAGS.extend(['-g'])"</span><span class="p">)</span>
            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_build_type</span> <span class="o">==</span> <span class="s">"Release"</span><span class="p">:</span>
                <span class="n">sections</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">"    conf.env.CXXFLAGS.extend(['-O3'])"</span><span class="p">)</span>

        <span class="k">return</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sections</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_save_toolchain_file</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">filename</span> <span class="o">=</span> <span class="s">"waf_conan_toolchain.py"</span>
        <span class="n">content</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toolchain_content</span><span class="p">()</span>
        <span class="n">output_path</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_conanfile</span><span class="o">.</span><span class="n">build_folder</span>
        <span class="n">save</span><span class="p">(</span>
            <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">),</span>
            <span class="n">content</span><span class="p">,</span>
            <span class="n">only_if_modified</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_save_toolchain_file</span><span class="p">()</span>
        <span class="n">args</span> <span class="o">=</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">command</span> <span class="o">=</span> <span class="s">"waf configure "</span> <span class="o">+</span> <span class="s">" "</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">arg</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">args</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_conanfile</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">args</span> <span class="o">=</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">command</span> <span class="o">=</span> <span class="s">"waf build "</span> <span class="o">+</span> <span class="s">" "</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">arg</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">args</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_conanfile</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">command</span><span class="p">)</span></code></pre></figure>

<p>We modify the configuration environment through the <code class="highlighter-rouge">conf.env</code> variable setting all the relevant flags for
<em>Release</em> and <em>Debug</em> configurations depending on if we are building with Visual Studio or any other compiler.
We also define a <code class="highlighter-rouge">build</code> method that runs the Waf build tool.</p>

<h3 id="putting-it-all-together">Putting it all together</h3>

<h4 id="building-the-library">Building the library</h4>

<p>At this point, we are able to create a recipe that builds our library with the Waf build system. An example of
the structure of the project would be as follows:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">waf-mylib/
â”œâ”€â”€ src/
â”‚   â””â”€â”€ mylib.cpp
â”œâ”€â”€ include/
â”‚   â””â”€â”€ mylib.hpp
â”œâ”€â”€ conanfile.py
â””â”€â”€ wscript</code></pre></figure>

<p>With a <code class="highlighter-rouge">conanfile.py</code> that declares the requirement of all the necessary tools for building the project.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">waf_import</span> <span class="o">=</span> <span class="n">python_requires</span><span class="p">(</span><span class="s">"waf-build-helper/0.1@user/channel"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">MyLibConan</span><span class="p">(</span><span class="n">ConanFile</span><span class="p">):</span>
    <span class="n">settings</span> <span class="o">=</span> <span class="s">"os"</span><span class="p">,</span> <span class="s">"compiler"</span><span class="p">,</span> <span class="s">"build_type"</span><span class="p">,</span> <span class="s">"arch"</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">"mylib-waf"</span>
    <span class="n">version</span> <span class="o">=</span> <span class="s">"1.0"</span>
    <span class="n">license</span> <span class="o">=</span> <span class="s">"MIT"</span>
    <span class="n">author</span> <span class="o">=</span> <span class="s">"Conan Team"</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s">"Just a simple example of using Conan to package a Waf lib"</span>
    <span class="n">exports</span> <span class="o">=</span> <span class="s">"LICENSE"</span>
    <span class="n">exports_sources</span> <span class="o">=</span> <span class="s">"wscript"</span><span class="p">,</span> <span class="s">"src/mylib.cpp"</span><span class="p">,</span> <span class="s">"include/mylib.hpp"</span>
    <span class="n">build_requires</span> <span class="o">=</span> <span class="s">"waf/2.0.18@user/channel"</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">waf</span> <span class="o">=</span> <span class="n">waf_import</span><span class="o">.</span><span class="n">WafBuildEnvironment</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="n">waf</span><span class="o">.</span><span class="n">configure</span><span class="p">()</span>
        <span class="n">waf</span><span class="o">.</span><span class="n">build</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">package</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">"*.hpp"</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"include"</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">"include"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">"*.lib"</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"lib"</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">"build"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">"*.dll"</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"bin"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">"*.dylib*"</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"lib"</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">"build"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">"*.so"</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"lib"</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">"build"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">"*.a"</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"lib"</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">"build"</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s">"LICENSE"</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="s">"licenses"</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">"."</span><span class="p">,</span> <span class="n">keep_path</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">package_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cpp_info</span><span class="o">.</span><span class="n">libs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"mylib"</span><span class="p">]</span></code></pre></figure>

<p>The simplest <code class="highlighter-rouge">wscript</code> to build the library could be like this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">top</span> <span class="o">=</span> <span class="s">'.'</span>
<span class="n">out</span> <span class="o">=</span> <span class="s">'build'</span>

<span class="k">def</span> <span class="nf">options</span><span class="p">(</span><span class="n">opt</span><span class="p">):</span>
    <span class="n">opt</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'compiler_cxx'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="n">conf</span><span class="p">):</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'compiler_cxx'</span><span class="p">)</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'waf_conan_toolchain'</span><span class="p">,</span> <span class="n">tooldir</span><span class="o">=</span><span class="s">'.'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">bld</span><span class="p">):</span>
    <span class="n">bld</span><span class="o">.</span><span class="n">stlib</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="s">'mylib'</span><span class="p">,</span> <span class="n">source</span><span class="o">=</span><span class="s">'./src/mylib.cpp'</span><span class="p">)</span></code></pre></figure>

<p>The information for the build system is passed through the loading of the <code class="highlighter-rouge">waf_conan_toolchain.py</code> file
that was created by the build-helper.</p>

<h4 id="consuming-the-library">Consuming the library</h4>

<p>We could now consume the library even if we didnâ€™t have Waf installed but for the sake of completeness, letâ€™s
consume it using Waf as well. We will have to declare the needed <code class="highlighter-rouge">build_requires</code> and <code class="highlighter-rouge">python_requires</code> in
the <code class="highlighter-rouge">conanfile.py</code>:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">waf_import</span> <span class="o">=</span> <span class="n">python_requires</span><span class="p">(</span><span class="s">"waf-build-helper/0.1@user/channel"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TestWafConan</span><span class="p">(</span><span class="n">ConanFile</span><span class="p">):</span>
    <span class="n">settings</span> <span class="o">=</span> <span class="s">"os"</span><span class="p">,</span> <span class="s">"compiler"</span><span class="p">,</span> <span class="s">"build_type"</span><span class="p">,</span> <span class="s">"arch"</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">"waf-consumer"</span>
    <span class="n">generators</span> <span class="o">=</span> <span class="s">"Waf"</span>
    <span class="n">requires</span> <span class="o">=</span> <span class="s">"mylib-waf/1.0@user/channel"</span>
    <span class="n">build_requires</span> <span class="o">=</span> <span class="s">"WafGen/0.1@user/channel"</span><span class="p">,</span> <span class="s">"waf/2.0.18@user/channel"</span>
    <span class="n">exports_sources</span> <span class="o">=</span> <span class="s">"wscript"</span><span class="p">,</span> <span class="s">"main.cpp"</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">waf</span> <span class="o">=</span> <span class="n">waf_import</span><span class="o">.</span><span class="n">WafBuildEnvironment</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="n">waf</span><span class="o">.</span><span class="n">configure</span><span class="p">()</span>
        <span class="n">waf</span><span class="o">.</span><span class="n">build</span><span class="p">()</span></code></pre></figure>

<p>And create a <code class="highlighter-rouge">wscript</code> that loads all the Conan information in the Waf environment.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">options</span><span class="p">(</span><span class="n">opt</span><span class="p">):</span>
    <span class="n">opt</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'compiler_cxx'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="n">conf</span><span class="p">):</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'compiler_cxx'</span><span class="p">)</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'waf_conan_libs_info'</span><span class="p">,</span> <span class="n">tooldir</span><span class="o">=</span><span class="s">'.'</span><span class="p">)</span>
    <span class="n">conf</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'waf_conan_toolchain'</span><span class="p">,</span> <span class="n">tooldir</span><span class="o">=</span><span class="s">'.'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">bld</span><span class="p">):</span>
    <span class="n">bld</span><span class="o">.</span><span class="n">program</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="s">'main.cpp'</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="s">'app'</span><span class="p">,</span> <span class="n">use</span><span class="o">=</span><span class="n">bld</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">CONAN_LIBS</span><span class="p">)</span></code></pre></figure>

<p>Now, we could build our application using Conan:</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">conan source . --source-folder=build
conan install . --install-folder=build
conan build . --build-folder=build</code></pre></figure>

<p class="centered">
    <img src="http://localhost:4000/assets/post_images/2019-07-24/success_waf.gif" align="center" alt="When the build is succesful..." />
</p>

<p>At this point, you should have a general understanding of what Conan <em>generators</em>, <em>build-helpers</em> and
<em>installers</em> are and how they can help you to integrate almost any build system in Conan. Now you can clone
the <a href="https://github.com/conan-io/examples">Conan examples repository</a> to see the implementation at a higher
detail and start integrating your favourite build system in the Conan package manager.</p>
:ET