I"ï;<p>This time we have 1.12 out to start the 2019 year and there are some interesting features and improvements we would like to highlight. Let‚Äôs
go over them!</p>

<h2 id="editable-packages">Editable packages</h2>

<p>It is fairly common that to test new code in packages with other dependencies while developing, you had to go through the slow
<code class="highlighter-rouge">conan create</code> process to store new code in the cache.</p>

<p>Following the path of other package managers, we tried to imagine how an ‚Äúeditable‚Äù mode for Conan should work and there were some main
points:</p>

<ul>
  <li>
    <p>The user has to be able to compile without Conan (IDE/command line, not <code class="highlighter-rouge">conan build</code>).</p>
  </li>
  <li>
    <p>Freedom to choose any project structure for header folders, source code, library folders‚Ä¶</p>
  </li>
  <li>
    <p>Handle any configuration of settings without creating artificial packages for all of them.</p>
  </li>
</ul>

<p>To illustrate how editable package work, we have created a repo <a href="https://github.com/memsharded/editables-examples">here</a> that we would use
it as example.</p>

<p>Let‚Äôs say we are developing a final ‚Äúhello‚Äù application and we are relying on another library called ‚Äúsay‚Äù to print our message. We are
developing the ‚Äúsay‚Äù library and would like to check the changes in the ‚Äúhello‚Äù app. The normal way would be to make changes in the ‚Äúsay‚Äù
library and run <code class="highlighter-rouge">conan create</code> to put its binaries in the local cache. After that, consume it from the ‚Äúhello‚Äù app with a
<code class="highlighter-rouge">conan install</code>.</p>

<p>With this feature, we have a command <a href="https://docs.conan.io/en/latest/reference/commands/development/link.html">conan link</a> to tell Conan
that we want to consume the ‚Äúsay‚Äù library under the package name<code class="highlighter-rouge">say/0.1@user/testing</code> directly from the current folder instead from the
Conan cache.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd cmake/say
$ mkdir build &amp;&amp; cd build
$ conan link .. say/0.1@user/testing --layout=../layout
</code></pre></div></div>

<p>The <em>layout</em> indicates Conan that it has to search in the following paths relative to the directory of the <em>conanfile.py</em> used in the
command. Here is the content of that file:</p>

<figure class="highlight"><pre><code class="language-conf" data-lang="conf">[<span class="n">includedirs</span>]
<span class="n">src</span>

[<span class="n">libdirs</span>]
<span class="n">build</span>/<span class="n">lib</span></code></pre></figure>

<p>Now we can build in the development folder (this could also be triggered by an IDE):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ conan install ..
$ cmake ../src -G "Visual Studio 15 2017 Win64"
$ cmake --build . --config Release
</code></pre></div></div>

<p>Let‚Äôs consume the ‚Äúsay‚Äù library from the ‚Äúhello‚Äù app now:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd ../../hello
$ mkdir build &amp;&amp; cd build
$ conan install ..
...
conanfile.py (hello/0.1@None/None): Installing package
Requirements
    say/0.1@user/testing from user folder - Editable
Packages
    say/0.1@user/testing:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 - Editable
...
$ cmake ../src -G "Visual Studio 15 2017 Win64"
$ cmake --build . --config Release
$ bin\app.exe
Release: Hello World Release!
</code></pre></div></div>

<p>Now we make some changes in the ‚Äúsay‚Äù library without moving it to the cache. For example, we change the <code class="highlighter-rouge">Release:</code> message to
<code class="highlighter-rouge">****** Release ******:</code> and build it:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd ../../hello
$ cmake --build . --config Release
</code></pre></div></div>

<p>Finally, out ‚Äúhello‚Äù app should be built with the modified ‚Äúsay‚Äù:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cmake --build . --config Release
$ bin\app.exe
******* Release *******: Hello World Release!
</code></pre></div></div>

<p>As you can see, having this new workflow is very convenient during development and the compilation is not coupled with Conan, only a
<code class="highlighter-rouge">conan install</code> is necessary.</p>

<p>If you want to read more, here is the <a href="https://docs.conan.io/en/latest/developing_packages/editable_packages.html">link to the docs section</a>
explaining this new feature and the possibility to use different layout files.</p>

<p>There are some pending issues like having a proper <a href="https://github.com/conan-io/conan/issues/4424">layout templating system</a> or showing
packages that are in editable mode when searching, but we hope to have them fixed for next release.</p>

<h3 id="new-path-for-workspaces">New path for workspaces</h3>

<p>We are aware that there has been a lot of interest in the experimental
<a href="https://docs.conan.io/en/latest/developing_packages/workspaces.html">workspaces feature</a>. However, as releases came out and development
continued we started to think the implementation of workspaces was lacking at some points.</p>

<p>Additionally, the idea of the package layouts and editable mode was something really interesting to explore. So our decision was to delay
the development of issues regarding workspaces until editable packages were released.</p>

<p>There has been some work done already to redesign and reimplement workspaces on top of the editable mode feature and our first impressions
are good. We will try to restart the development of them for the following releases.</p>

<h2 id="composable-profiles">Composable profiles</h2>

<p>With Conan 1.12, commands with the <code class="highlighter-rouge">--profile</code> parameter are now provided with the possibility of using it multiple times to achieve a
profile composition.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ conan install . --profile windows --profile 32bit
</code></pre></div></div>

<p>The priority of the applied values is from right to left. In the case of the example, the ‚Äú32bits‚Äù profile configuration will have priority
over the ‚Äúwindows‚Äù profile configuration.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># windows                  # 32bit              # result
[settings]                 [settings]           [settings]
os=Windows                 os=Windows           os=Windows
os_build=Windows           os_build=Windows     os_build=Windows
arch=x86_64                arch=x86             arch=x86
arch_build=x86_64          arch_build=x86       arch_build=x86
compiler=Visual Studio                          compiler=Visual Studio
compiler.version=14                             compiler.version=14
compiler.runtime=MD                             compiler.runtime=MD
build_type=Release                              build_type=Release
</code></pre></div></div>

<p>It is a very useful feature when you want to add build require tools like CMake, which is something not specific to a configuration. For
example, having a profile <code class="highlighter-rouge">cmake</code> with build require <a href="https://github.com/conan-community/conan-cmake-installer">cmake_installer</a> and a
<code class="highlighter-rouge">mingw</code> one with the ‚Äúgcc‚Äù compiler and the <a href="https://github.com/conan-community/conan-mingw-installer">mingw_installer</a> too would make it
very easy to apply to a and to use it:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ conan install . --profile mingw --profile cmake
</code></pre></div></div>

<h2 id="full-reference-and-json-for-some-commands">Full reference and JSON for some commands</h2>

<p>As you might now, some commands had some issues when referencing names of other packages. For example, the <code class="highlighter-rouge">conan install --build &lt;name&gt;</code>
was only using the name of a requirement, which could be problematic when using dependencies with the same name but coming from different
users. Now you can do this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ conan install . --build liba/1.0@user/channel
</code></pre></div></div>

<p>Together with this feature, the install command also includes now an additional reference for consumer packages that comes handy to have
some information defined like the user or the channel.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ conan install . liba/1.0@user/channel
</code></pre></div></div>

<p>There is more information in <a href="https://docs.conan.io/en/latest/reference/commands/consumer/install.html">this section</a> of the documentation.</p>

<p>To end with the new commands, the <code class="highlighter-rouge">conan info</code> has now a generalized <code class="highlighter-rouge">--json</code> parameter not only for build order but for the dependency
graph information. We are sure this will come handy for those orchestrating CIs using Conan. Check the
<a href="https://docs.conan.io/en/latest/reference/commands/output/info.html">output section</a> to see how it looks like.</p>

<h2 id="new-architectures-supported">New architectures supported</h2>

<p><a href="https://docs.conan.io/en/latest/reference/config_files/settings.yml.html#architectures">New architectures</a> arrived at this release too.
This time we included new ones for Apple and PowerPC.</p>

<p>Apple introduced a new one for watchOS called <code class="highlighter-rouge">arm64_32</code>. As we had already followed the <code class="highlighter-rouge">armvX</code> pattern and <code class="highlighter-rouge">amrv8</code> was already in
place, we decided to call this one <code class="highlighter-rouge">armv8_32</code>. Similarly, the new iOS architecture called <code class="highlighter-rouge">arm64e</code> was introduced in <em>settings.yml</em> as
<code class="highlighter-rouge">armv8.3</code>. You can manage this conversions with <code class="highlighter-rouge">tools.to_apple_arch()</code>.</p>

<p>Finally, there was a request to support PowerPC 32-bit architecture, so there is also a new <code class="highlighter-rouge">ppc32</code> one too.</p>

<p>Those can be correctly handled with apple tools and <code class="highlighter-rouge">tools.get_gnu_triplet()</code> and will be taken into account in some generators like
<code class="highlighter-rouge">b2</code>.</p>

<p>Check that your <em>settings.yml</em> is updated when you install Conan 1.12 and run a new <code class="highlighter-rouge">conan install</code>. In case your <em>settings.yml</em> was
modified, a new <em>settings.yml.new</em> will be created so you can check the diff.</p>

<h2 id="generators-template-files--variable-naming-convention">Generators: Template files &amp; variable naming convention</h2>

<p>Some releases ago we introduced a new <a href="https://docs.conan.io/en/latest/reference/generators/make.html">make generator</a> and there were some
issues with the naming of the variables that could be misleading to users (See
<a href="https://github.com/conan-io/docs/pull/955#issuecomment-442754327">conan-io/docs#955</a>).</p>

<p>As the Conan <code class="highlighter-rouge">cpp_info</code> model includes a <code class="highlighter-rouge">cppflags</code> that is confusing, we finally decided to rename <code class="highlighter-rouge">CONAN_CPPFLAGS</code> to
<code class="highlighter-rouge">CONAN_CXXFLAGS</code> in the generator and follow this path for premake too, following the convention that was already in place in the
cmake generator. There is also an issue open to create a <code class="highlighter-rouge">cpp_info.cxxflags</code> attribute deprecating <code class="highlighter-rouge">cpp_info.cppflags</code> used in
<code class="highlighter-rouge">package_info()</code> method of conanfile without breaking (<a href="https://github.com/conan-io/conan/issues/4461">conan-io/conan#4461</a>).</p>

<p>In the other hand, some users requested the the possibility to export some kind of templating files in order to make the task of generating
the <em>conanbuildinfo</em> files easier in some cases. now the use of <code class="highlighter-rouge">exports</code> attribute is allowed in custom generators:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">MyCustomGeneratorPackage</span><span class="p">(</span><span class="n">ConanFile</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">"custom"</span>
    <span class="n">version</span> <span class="o">=</span> <span class="s">"0.1"</span>
    <span class="n">exports</span> <span class="o">=</span> <span class="s">"mytemplate.txt"</span></code></pre></figure>

<p>You can see a full example in this
<a href="https://docs.conan.io/en/latest/howtos/custom_generators.html#using-template-files-for-custom-generators">how-to</a>.</p>

<h2 id="other-improvements">Other improvements</h2>

<p>There are new tools and improvements available in this release too:</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">tools.Git()</code> and <code class="highlighter-rouge">tools.SVN()</code> have anew method <code class="highlighter-rouge">get_tag()</code> that checks the name of the tag has been checked out.
(See <a href="https://docs.conan.io/en/latest/reference/tools.html#tools-git">link</a>).</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">MSBuild()</code> build helper has now a definitions dictionary that can be used to set any property to the project during the build. Also
the default toolset is now applied although no toolset was specified in the profile. This should not break the old behavior as this was
the default value already applied in <code class="highlighter-rouge">PlatformToolset</code> flag.
(See <a href="https://docs.conan.io/en/latest/reference/build_helpers/visual_studio.html#build">link</a>).</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">tools.environment_append()</code> is now able to unset variables using the <code class="highlighter-rouge">None</code> value.
(See <a href="https://docs.conan.io/en/latest/reference/tools.html#tools-environment-append">link</a>).</p>
  </li>
  <li>
    <p>Short paths feature now generates them in a deterministic way instead of having a random path in the short paths directory.</p>
  </li>
</ul>

<p>If you want to know more about the changes in this release, check the full list of features and fixes in the
<a href="https://docs.conan.io/en/latest/changelog.html">changelog</a> (it includes links to the related Pull Request) and don‚Äôt forget to
<a href="https://conan.io/downloads.html">update</a>!</p>

<p>Finally, if you find a bug or want to start a new discussion, please do not hesitate to open a new issue
<a href="https://github.com/conan-io/conan/issues">here</a>.</p>
:ET